var StarterConfig = {
	MinGameTime: 120, // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
	CreateGameDelay: 5, // Seconds to wait before creating a new game
	ResetCount: 999, // Reset game count back to 1 every X games.
	CharacterDifference: 99, // Character level difference. Set to false to disable character difference.
	ChatActionsDelay: 2, // Seconds to wait in lobby before entering a channel

	SwitchKeyDelay: 0, // Seconds to wait before switching a used/banned key or after realm down
	CrashDelay: 0, // Seconds to wait after a d2 window crash
	FTJDelay: 60, // Seconds to wait after failing to create a game
	RealmDownDelay: 3, // Minutes to wait after getting Realm Down message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use.
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 10, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 60, // Seconds to wait before cancelling the 'Waiting in Line...' screen
	GameDoesNotExistTimeout: 30 // Seconds to wait before cancelling the 'Game does not exist.' screen
};

var ChannelConfig = {
	// Now you can join separate channels for separate profiles, use separate join messages etc
	// Format: "Profile Name": {JoinChannel: "channel", FirstJoinMessage: "login message", AnnounceGames: true}
	// Multiple entries are separated by a comma

	"Example": {JoinChannel: "my channel", FirstJoinMessage: ".login", AnnounceGames: true}
};



// No touchy!
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("torchsystem.js");

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

var difficulty, gameStart, ingame, muleTrigger, firstLogin, connectFail, chatActionsDone, torchTrigger, torchMuleTrigger,
	gamePass = "",
	gameName = "",
	lastGameStatus = "ready",
	gameCount = DataFile.getStats().runs + 1;

function timeoutDelay(text, time) {
	var endTime = getTickCount() + time;

	while (getTickCount() < endTime) {
		Controller.updateStatus(text + " (" + Math.floor((endTime - getTickCount()) / 1000) + "s)");
		delay(500);
	}
}

function locationTimeout(time, location) {
	var endtime = getTickCount() + time;

	while (getLocation() === location && endtime > getTickCount()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function updateCount() {
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		login(me.profile);
	} catch (e) {

	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}

function ScriptMsgEvent(msg) {
	switch (msg) {
	case "mule":
		muleTrigger = true;

		break;
	case "torch":
		torchTrigger = true;

		break;
	case "muleTorch":
		torchMuleTrigger = true;

		break;
	case "requestMuleMode":
		scriptBroadcast(torchMuleTrigger ? "torch" : "normal");

		torchMuleTrigger = false;

		break;
	}
}

function timer(tick) {
	if (!tick) {
		return "";
	}

	var min, sec;

	min = Math.floor((getTickCount() - tick) / 60000).toString();

	if (min <= 9) {
		min = "0" + min;
	}

	sec = (Math.floor((getTickCount() - tick) / 1000) % 60).toString();

	if (sec <= 9) {
		sec = "0" + sec;
	}

	return " (" + min + ":" + sec + ")";
}

function updateGameInfo() {
	var gameInfo = Controller.getGameInfo();
	gameName = gameInfo.name;
	gamePass = gameInfo.password;
	difficulty = gameInfo.difficulty;
}

function main() {
	addEventListener('scriptmsg', ScriptMsgEvent);
	delay(rand(1, 2) * 1000);

	GameDataCommunicator.setIsUp("no");
	updateGameInfo();

	if (Controller.error === "@error") {
		timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		Controller.report(ReportType.Run);
	}

	while (true) {
		while (me.ingame) { // returns true before actually in game so we can't only use this check
			if (me.gameReady) { // returns false when switching acts so we can't use while
				GameDataCommunicator.setIsUp("yes");

				if (!ingame) {
					gameStart = getTickCount();

					if (me.gamepassword.toLowerCase() !== gamePass.toLowerCase()) {
						print("leaving game");
						quit();
					}

					print("Updating Status");
					//Controller.updateStatus("Game: " + me.gamename);

					lastGameStatus = "ingame";
					ingame = true;

					DataFile.updateStats("runs", gameCount);
				}

				Controller.updateStatus("Game: " + me.gamename + timer(gameStart));
			}

			delay(1000);
		}

		GameDataCommunicator.setIsUp("no");

		locationAction(getLocation());
		delay(1000);
	}
}

function locationAction(location) {
	var i, control, string, text, gambleGame;

MainSwitch:
	switch (location) {
	case 0:
		break;
	case 1:	// Lobby
		Controller.updateStatus("Lobby");

		if (ChannelConfig.hasOwnProperty(me.profile) && ChannelConfig[me.profile].JoinChannel !== "") {
			ControlAction.click(6, 27, 480, 120, 20);

			break;
		}

		// automule test lines
		//ingame = true;
		//muleTrigger = true;

		if (ingame) {
			if (getTickCount() - gameStart < StarterConfig.MinGameTime * 1e3) {
				timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + gameStart - getTickCount());
			}

			// ### automule ###
			if (muleTrigger || torchMuleTrigger) {
				GameDataCommunicator.setIsUp("no");
				AutoMule.outOfGameCheck(torchMuleTrigger ? 1 : 0);

				muleTrigger = false;
				// torchMuleTrigger is set to false elsewhere because it would trigger normal mule if set to false here

				break;
			}
			// ### automule end ###

			// ### Torch System ###
			if (torchTrigger) {
				TorchSystem.outOfGameCheck();

				torchTrigger = false;

				break;
			}
			// ### Torch System end ###

			print("updating runs");
			Controller.report(ReportType.Run);

			gameCount += 1;
			lastGameStatus = "ready";
			ingame = false;

			if (StarterConfig.ResetCount && gameCount >= StarterConfig.ResetCount) {
				gameCount = 1;

				DataFile.updateStats("runs", gameCount);
			}
		}

		// #### experimental gambling system start ####
		gambleGame = Gambling.checkGamblers();

		if (gambleGame && DataFile.getStats().gold > Gambling.minGold) {
			delay(3000);
			joinGame(gambleGame[0], gambleGame[1]);
			delay(1000);
			locationTimeout(5000, location);

			break;
		}
		// #### experimental gambling system end ####

		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			break;
		}

		if (!locationTimeout(5000, location)) { // in case create button gets bugged
			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}

			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}
		}

		break;
	case 2: // Waiting In Line
		Controller.updateStatus("Waiting...");
		locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 3: // Lobby Chat
		Controller.updateStatus("Lobby Chat");

		if (ingame) {
			if (getTickCount() - gameStart < StarterConfig.MinGameTime * 1e3) {
				timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + gameStart - getTickCount());
			}

			// ### automule ###
			if (muleTrigger || torchMuleTrigger) {
				GameDataCommunicator.setIsUp("no");
				AutoMule.outOfGameCheck(torchMuleTrigger ? 1 : 0);

				muleTrigger = false;
				// torchMuleTrigger is set to false elsewhere because it would trigger normal mule if set to false here

				break;
			}
			// ### automule end ###

			// ### Torch System ###
			if (torchTrigger) {
				TorchSystem.outOfGameCheck();

				torchTrigger = false;

				break;
			}
			// ### Torch System end ###

			print("updating runs");
			Controller.report(ReportType.Run);

			gameCount += 1;
			lastGameStatus = "ready";
			ingame = false;

			if (StarterConfig.ResetCount && gameCount >= StarterConfig.ResetCount) {
				gameCount = 1;

				DataFile.updateStats("runs", gameCount);
			}
		}

		// #### experimental gambling system start ####
		gambleGame = Gambling.checkGamblers();

		if (gambleGame && DataFile.getStats().gold > Gambling.minGold) {
			delay(3000);
			joinGame(gambleGame[0], gambleGame[1]);
			delay(1000);
			locationTimeout(5000, location);

			break;
		}
		// #### experimental gambling system end ####

		if (!chatActionsDone) {
			chatActionsDone = true;

			timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
			say("/j " + ChannelConfig[me.profile].JoinChannel);
			delay(1000);

			if (ChannelConfig[me.profile].FirstJoinMessage !== "") {
				say(ChannelConfig[me.profile].FirstJoinMessage);
				delay(500);
			}
		}

		if (ChannelConfig[me.profile].AnnounceGames) {
			delay(1000);
			say("Next game is " + gameName + gameCount + (gamePass === "" ? "" : "//" + gamePass));
		}

		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			break;
		}

		if (!locationTimeout(5000, location)) { // in case create button gets bugged
			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}

			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}
		}

		break;
	case 4: // Create Game
		Controller.updateStatus("Creating Game");

		control = getControl(1, 657, 342, 27, 20);

		if (typeof StarterConfig.CharacterDifference === "number") {
			if (control.disabled === 4) {
				ControlAction.click(6, 431, 341, 15, 16);
			}

			ControlAction.setText(1, 657, 342, 27, 20, StarterConfig.CharacterDifference.toString());
		} else if (StarterConfig.CharacterDifference === false && control.disabled === 5) {
			ControlAction.click(6, 431, 341, 15, 16);
		}

		while (!gameName) {
			updateGameInfo();
			delay(500);
		}

		if (lastGameStatus === "pending") {
			Controller.printToConsole("Failed to create game");
			timeoutDelay("FTJ delay", StarterConfig.FTJDelay * 1e3);

			gameCount += 1;
		}

		timeoutDelay("Make Game Delay", StarterConfig.CreateGameDelay * 1e3);
		createGame(gameName + gameCount, gamePass, difficulty === "Hell" ? 2 : difficulty === "Nightmare" ? 1 : 0);
		locationTimeout(5000, location);

		lastGameStatus = "pending";

		break;
	case 5: // Join Game
		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
	case 9: // Login
	case 18: // D2 Splash
		if (firstLogin) { // multiple realm botting fix in case of R/D or disconnect
			ControlAction.click(6, 33, 572, 128, 35);
		}

		if (!firstLogin) {
			firstLogin = true;
		}

		Controller.updateStatus("Logging In");

		try {
			login(me.profile);
		} catch (e) {
			print(e);
		}

		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				Controller.updateStatus("Invalid Password");
				Controller.printToConsole("Invalid Password");
				break;
			case getLocaleString(5208):
				Controller.updateStatus("Invalid Account");
				Controller.printToConsole("Invalid Account");
				break;
			case getLocaleString(5199):
				Controller.updateStatus("Disabled CDKey");
				Controller.printToConsole("Disabled CDKey");
				Controller.report(ReportType.CDKeyDisabled);

				if (Controller.keyswap) {
					timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					Controller.restart();
				} else {
					Controller.stop();
				}

				break;
			case getLocaleString(5347):
				Controller.updateStatus("Disconnected");
				Controller.printToConsole("Disconnected");
				ControlAction.click(6, 335, 412, 128, 35);
				break MainSwitch;
			default:
				Controller.updateStatus("Login Error");
				Controller.printToConsole("Login Error - " + string);
				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);

		while (true) {
			delay(1000);
		}

		break;
	case 11: // Unable To Connect
		Controller.updateStatus("Unable To Connect");

		if (connectFail) {
			timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		}

		if (!ControlAction.click(6, 335, 450, 128, 35)) {
			break;
		}

		connectFail = true;

		break;
	case 12: // Character Select
		try {
			login(me.profile);
		} catch (e2) {

		}

		break;
	case 13: // Realm Down - Character Select screen
		Controller.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		Controller.report(ReportType.RealmDown);

		if (Controller.keyswap) {
			Controller.printToConsole("Realm Down - Changing CD-Key");
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restart();
		} else {
			Controller.restart();
		}

		break;
	case 14: // Character Select / Main Menu - Disconnected
		Controller.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 15: // New Character
		break;
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		Controller.printToConsole("CD-Key in use by " + ControlAction.getText(4, 158, 310, 485, 40));
		Controller.report(ReportType.CDKeyInUse);

		if (Controller.keyswap) {
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restart();
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		Controller.report(ReportType.CDKeyInvalid);

		if (Controller.keyswap) {
			Controller.printToConsole("Invalid CD-Key");
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restart();
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 23: // Character Select - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		ControlAction.click(6, 533, 469, 120, 20);

		gameCount += 1;
		lastGameStatus = "ready";

		break;
	case 27: // Gateway Select
		break;
	case 28: // Lobby - Game Does Not Exist
		Controller.printToConsole("Game doesn't exist");

		if (Controller.rdblocker) {
			Controller.printToConsole("CDKey is probably flagged.");

			if (Controller.keyswap) {
				Controller.report(ReportType.CDKeyFlagged);
				timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				Controller.restart();
			}
		} else {
			locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		lastGameStatus = "ready";

		break;
	case 38: // Game is full
		// doesn't happen when making
		break;
	case 42: // Empty character screen
		ControlAction.click(6, 33, 572, 128, 35);

		break;
	default:
		if (location !== undefined) {
			Controller.printToConsole("Unhandled location " + location);
			delay(500);
			Controller.restart();
		}

		break;
	}
}
