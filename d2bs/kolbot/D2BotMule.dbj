var StarterConfig = {
	MinGameTime: 120, // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
	SwitchKeyDelay: 0, // Seconds to wait before switching a used/banned key or after realm down
	RealmDownDelay: 3, // Minutes to wait after getting Realm Down message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use.
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 10, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 60 // Seconds to wait before cancelling the 'Waiting in Line...' screen
};


var muler, mulerStatus, connectFail, makeAcc, muleMode, muleFilename, muleInfoObj,
	makeNext = false,
	status = "loading";

// Mule Data object manipulates external mule datafile
var MuleData = {
	// create a new mule datafile
	create: function () {
		var obj, string;

		obj = {
			account: "",
			accNum: 0,
			character: "",
			charNum: 0,
			fullChars: [],
			torchChars: []
		};

		string = JSON.stringify(obj);

		FileTools.writeText(muleFilename, string);
	},

	// read data from the mule datafile and return the data object
	read: function () {
		var obj, string;

		string = FileTools.readText(muleFilename);
		obj = JSON.parse(string);

		return obj;
	},

	// write a data object to the mule datafile
	write: function (obj) {
		var string;

		string = JSON.stringify(obj);

		FileTools.writeText(muleFilename, string);
	}
};

// stash picked items
function stashItems() {
	var i,
		items = me.getItems();

	for (i = 0; i < items.length; i += 1) {
		if (items[i].mode === 0 && items[i].location === 3) {
			Storage.Stash.MoveTo(items[i]);
		}
	}

	return true;
}

// pick items from ground
function pickItems() {
	var i, items, canFit, item,
		rval = "fail",
		list = [];

	while (!me.ingame && !me.gameReady) {
		delay(500);
	}

	for (i = 0; i < 10; i += 1) {
		items = me.getItems();

		if (items) {
			break;
		}

		delay(1000);
	}

	if (items) {
		for (i = 0; i < items.length; i += 1) {
			if (items[i].mode === 0 && items[i].location === 3 && Town.ignoredItemTypes.indexOf(items[i].itemType) > -1) { // drop trash (id/tp scroll primarily)
				try {
					items[i].drop();
				} catch (dropError) {
					print("Failed to drop an item. Not like it matters.");
				}
			}
		}
	}

	while (me.gameReady) {
		if (mulerStatus === "done") {
			item = getUnit(4, -1, 3); // item, on ground

			if (item) {
				do {
					if (Town.ignoredItemTypes.indexOf(item.itemType) === -1) { // don't pick up trash
						list.push(copyUnit(item));
					}
				} while (item.getNext());
			}

			// If and only if there is nothing left are we "done"
			if (list.length === 0) {
				rval = "done";

				break;
			}

			while (list.length > 0) {
				item = list.shift();
				canFit = Storage.Inventory.CanFit(item);

				if (!canFit) {
					stashItems();

					canFit = Storage.Inventory.CanFit(item);
				}

				if (canFit) {
					Pickit.pickItem(item);
				} else {
					rval = "next";
				}
			}

			if (rval === "next") {
				break;
			}
		} else {
			Controller.sendMessage(muler.toString(), {id: 10, msg: "report"});
			//Controller.sendMessageAll({msg: "report", id: 0});
		}

		delay(1000);
	}

	return rval;
}

// on some systems, copydata is sent in all lowercase...
function getMuler(msg) {
	var i;

	for (i = 0; i < TorchSystem.FarmerProfiles.length; i += 1) {
		// Make a difference between normal mule and torch mule request coming from torch profile
		if (msg.toLowerCase().indexOf("|torch") > -1 && msg.split("|torch")[0].toLowerCase() === TorchSystem.FarmerProfiles[i].toLowerCase()) {
			muleMode = 1; // mule torch

			return TorchSystem.FarmerProfiles[i];
		}
	}

	for (i = 0; i < AutoMule.enabledProfiles.length; i += 1) {
		if (msg.toLowerCase() === AutoMule.enabledProfiles[i].toLowerCase()) {
			muleMode = 0; // normal mule

			return AutoMule.enabledProfiles[i];
		}
	}

	return "";
}

// muler/mule communication function
function HandleMsg(msg) {
	// mode check instead of msg check because of crashes
	switch (msg.id) {
	// automule specific
	case 10: // mule request
		if (!muler) {
			muler = getMuler(msg.msg);
		} else {
			Controller.sendMessage(muler.toString(), {id: 10, msg: status});
			//Controller.sendMessageAll({msg: status, id: 0});
		}

		break;
	case 11: // begin item pickup
		status = "begin";

		break;
	case 12: // get muler's status
		mulerStatus = msg.msg;

		break;
	}
}

// set next account - increase account number in mule datafile
function nextAccount() {
	var obj = MuleData.read();

	obj.accNum = obj.accNum + 1;
	obj.account = muleInfoObj.accountPrefix + obj.accNum;
	obj.character = "";
	obj.charNum = 0;
	obj.fullChars = [];
	obj.torchChars = [];

	MuleData.write(obj);

	return obj.account;
}

// set next character - increase character number in mule datafile
function nextChar() {
	var i, num,
		charSuffix = "",
		charNumbers = "abcdefghijklmnopqrstuvwxyz",
		obj = MuleData.read();

	/*if (getLocation() === 12) {
		obj.charNum = ControlAction.getCharacters().length;
	}*/

	// dirty
	if (obj.charNum > 25) {
		obj.charNum = 0;
	}

	num = obj.accNum.toString();

	for (i = 0; i < num.length; i += 1) {
		charSuffix += charNumbers[parseInt(num[i], 10)];
	}

	charSuffix += charNumbers[obj.charNum];
	obj.charNum = obj.charNum + 1;
	obj.character = muleInfoObj.charPrefix + charSuffix;

	MuleData.write(obj);

	return obj.character;
}

function locationTimeout(time, location) {
	var endtime = getTickCount() + time;

	while (getLocation() === location && endtime > getTickCount()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function timeoutDelay(text, time) {
	var endTime = getTickCount() + time;

	while (getTickCount() < endTime) {
		Controller.updateStatus(text + " (" + Math.floor((endTime - getTickCount()) / 1000) + "s)");
		delay(500);
	}
}

function updateCount() {
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		Controller.getProfile().login();
	} catch (e) {

	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}

function checkTorch() {
	while (!me.gameReady) {
		delay(500);
	}

	var item = me.getItem("cm2");

	if (item) {
		do {
			if (item.quality === 7) {
				return true;
			}
		} while (item.getNext());
	}

	return false;
}

function foreverAlone() {
	var party = getParty();

	if (party) {
		do {
			if (party.name !== me.name) {
				return false;
			}
		} while (party.getNext());
	}

	return true;
}

include("json2.js");
include("oog.js");
include("automule.js");
include("mulelogger.js");
include("torchsystem.js");
include("NTItemParser.dbl");
include("common/storage.js");
include("common/pickit.js");
include("common/town.js");
include("common/pather.js");
include("common/misc.js");
include("common/config.js");
include("common/prototypes.js");

function main() {
	delay(rand(1, 2) * 1000);
	Controller.addMessageHandler(HandleMsg);

	// Wait for muler before login = give room to determine muling mode (normal or torch)
	while (!muler) {
		delay(1000);
	}

	print("Muler found: " + muler);

	muleInfoObj = muleMode === 0 ? AutoMule.Mule : AutoMule.TorchMule;
	muleFilename = muleMode === 0 ? "logs/AutoMule." + muleInfoObj.realm + ".json" : "logs/TorchMule." + muleInfoObj.realm + ".json";

	var obj, statusTimeout;

	try {
		// ugly solution to uglier problem - pickItem area update
		if (!FileTools.exists("data/" + me.profile + ".json")) {
			DataFile.create();
		}

		// create mule datafile if it doesn't exist
		if (!FileTools.exists(muleFilename)) {
			MuleData.create();
		}
	} catch (e) {
		print("Caught exception creating data files.");
		print(e);
		Controller.printToConsole("Exception: " + e);
	}

	while (true) {
		try {
			if (me.ingame && me.gameReady) {
				lastCreate = new Date();

				if (status === "loading") {
					status = "ready";

					Controller.updateStatus("In mule game.");
					Controller.printToConsole("In mule game.");
					Storage.Init();
				}

				for (statusTimeout = 0; statusTimeout < 60000 && status !== "begin"; statusTimeout += 500) {
					delay(500);
				}

				if (status !== "begin") {
					Controller.printToConsole("Nobody joined - stopping.");
					Controller.stopProfile();
				}

				me.overhead("begin");

				switch (pickItems()) {
				// done picking, tell the muler to leave game and kill mule profile
				case "done":
					Controller.sendMessage(muler.toString(),
						{id: 10, msg: "quit"});
					//Controller.sendMessageAll({msg: "quit", id: 0});
					MuleLogger.logChar();
					delay(500);

					obj = MuleData.read();

					if (checkTorch()) {
						obj.torchChars.push(me.name);
					}

					MuleData.write(obj);
					Controller.printToConsole("Done muling.");
					Controller.stopProfile();

					break;
				// can't fit more items, get to next character or account
				case "next":
					MuleLogger.logChar();
					delay(500);

					makeNext = true;
					obj = MuleData.read();

					if (checkTorch()) {
						obj.torchChars.push(me.name);
					}

					obj.fullChars.push(me.name);
					MuleData.write(obj);
					nextChar();
					Controller.printToConsole("Mule full, getting next character.");
					quit();

					break;
				case "fail":
					// Try again
					break;
				}
			}

			locationAction(getLocation());
			delay(1000);
		} catch (e2) {
			print("Caught an exception in the main loop.");
			print(e2);
			Controller.printToConsole("Exception: " + e2);
		}
	}
}

function locationAction(location) {
	var i, obj, info, control, string, text;

MainSwitch:
	switch (location) {
	case 0:
		break;
	case 1:
	case 3:
		if (makeNext) {
			ControlAction.click(6, 693, 490, 80, 20);

			break;
		}

		ControlAction.click(6, 652, 469, 120, 20); // Join

		break;
	case 4: // Create Game
		Controller.updateStatus("Creating Game");

		control = getControl(1, 657, 342, 27, 20);

		if (control && control.disabled === 5) {
			ControlAction.click(6, 431, 341, 15, 16); // remove level restriction
		}

		delay(2000);

		if(lastCreate !== undefined &&
			(new Date()).getTime() - lastCreate.getTime() < 1000 * StarterConfig.MinGameTime) {
			Controller.printToConsole("Waiting to re-join game.");
		}

		var minGameMillis = 1000 * StarterConfig.MinGameTime;

		// If we previously created a game wait to create a new one
		while(lastCreate !== undefined &&
			(new Date()).getTime() - lastCreate.getTime() < minGameMillis) {
			delay(1000);
		}

		createGame(AutoMule.muleGameName[0], AutoMule.muleGameName[1]);
		locationTimeout(5000, location);

		break;
	case 2: // Waiting In Line
		Controller.updateStatus("Waiting...");
		locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 5: // Join Game
		Controller.updateStatus("Join Game");
		delay(2000);

		if(lastCreate !== undefined &&
			(new Date()).getTime() - lastCreate.getTime() < 1000 * StarterConfig.MinGameTime) {
			Controller.printToConsole("Waiting to re-join game.");
		}

		var minGameMillis = 1000 * StarterConfig.MinGameTime;

		// If we previously created a game wait to create a new one
		while(lastCreate !== undefined &&
			(new Date()).getTime() - lastCreate.getTime() < minGameMillis) {
			delay(1000);
		}

		joinGame(AutoMule.muleGameName[0], AutoMule.muleGameName[1]);
		locationTimeout(5000, location);

		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // menu
	case 9: // login
		if (makeNext) {
			makeNext = false;
		}

		obj = MuleData.read();

		if (!obj.account || obj.account.indexOf(muleInfoObj.accountPrefix) < 0) {
			nextAccount();

			obj = MuleData.read();
		}

		info = {
			realm: muleInfoObj.realm,
			account: obj.account,
			password: muleInfoObj.accountPassword
		};

		if (makeAcc) {
			ControlAction.makeAccount(info);
			//FileTools.writeText("mules/" + info.account + ".txt", "");
			Controller.printToConsole("Made account: " + info.account);

			makeAcc = false;

			break;
		}

		ControlAction.loginAccount(info);

		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				Controller.updateStatus("Invalid Password");
				Controller.printToConsole("Invalid Password");
				break;
			case getLocaleString(5199):
				Controller.updateStatus("Disabled CDKey");
				Controller.printToConsole("Disabled CDKey");
				Controller.report(ReportType.CDKeyDisabled);

				if (Controller.keyswap) {
					Controller.restartProfile();
				} else {
					Controller.stopProfile();
				}

				break;
			case getLocaleString(5347):
				Controller.updateStatus("Disconnected");
				Controller.printToConsole("Disconnected");
				ControlAction.click(6, 335, 412, 128, 35);

				break MainSwitch;
			case getLocaleString(5208):
				ControlAction.click(6, 335, 412, 128, 35);

				makeAcc = true;

				break MainSwitch;
			default:
				Controller.updateStatus("Login Error");
				Controller.printToConsole("Login Error - " + string);
				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);

		while (true) {
			delay(1000);
		}

		break;
	case 11: // Unable To Connect
		Controller.updateStatus("Unable To Connect");

		if (connectFail) {
			timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		}

		if (!ControlAction.click(6, 335, 450, 128, 35)) {
			break;
		}

		connectFail = true;

		break;
	case 13: // Realm Down - Character Select screen
		Controller.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		Controller.report(ReportType.RealmDown);

		if (Controller.keyswap) {
			Controller.printToConsole("Realm Down - Changing CD-Key");
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restartProfile();
		} else {
			Controller.restartProfile();
		}

		break;
	case 14: // Character Select / Main Menu - Disconnected
		Controller.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 18: // splash
		ControlAction.click();

		break;
	case 12: // char select
	case 15: // new character (selected)
	case 29: // new character (list)
	case 42: // empty char screen
		obj = MuleData.read();

		if (makeNext) {
			if (obj.fullChars.length === 8 || (muleMode === 1 && obj.torchChars.length === 8)) {
				ControlAction.click(6, 33, 572, 128, 35);
				nextAccount();

				break;
			}

			makeNext = false;
		}

		if (!obj.character || obj.character.indexOf(muleInfoObj.charPrefix) < 0) {
			nextChar();

			obj = MuleData.read();
		}

		info = {
			account: obj.account,
			charName: obj.character,
			ladder: muleInfoObj.ladder,
			hardcore: muleInfoObj.hardcore,
			expansion: muleInfoObj.expansion,
			charClass: "amazon"
		};

		if (muleMode === 1 && obj.torchChars.indexOf(info.charName) > -1) {
			nextChar();

			break;
		}

		if (ControlAction.findCharacter(info)) {
			ControlAction.loginCharacter(info);
		} else {
			if (ControlAction.getCharacters().length >= 8) { // premade account that's already full
				ControlAction.click(6, 33, 572, 128, 35);
				nextAccount();

				break;
			}

			if (!ControlAction.makeCharacter(info)) {
				// TODO: check if acc is full and cancel location 15 and 29 if true
				nextChar();

				break;
			}

			//FileTools.appendText("mules/" + info.account + ".txt", info.charName + "\n");
			Controller.printToConsole("Made character: " + info.charName);
		}

		break;
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		Controller.printToConsole("CD-Key in use by " + ControlAction.getText(4, 158, 310, 485, 40));
		Controller.report(ReportType.CDKeyInUse);

		if (Controller.keyswap) {
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restartProfile();
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		Controller.report(ReportType.CDKeyInvalid);

		if (Controller.keyswap) {
			Controller.printToConsole("Invalid CD-Key");
			timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			Controller.restartProfile();
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 23: // Character Select - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // game already exists
		ControlAction.click(6, 652, 469, 120, 20); // Join

		break;
	case 27: // Gateway Select
		ControlAction.click(6, 436, 538, 96, 32);

		break;
	case 28: // Lobby - Game Does Not Exist
		ControlAction.click(6, 533, 469, 120, 20);

		break;
	case 30: // charname already exists
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 38: // Game is full
		break; // not sure how/if to handle
	}
}
